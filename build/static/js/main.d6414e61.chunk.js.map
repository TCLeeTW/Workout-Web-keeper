{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","utils/dateUtils.js","components/CreateArea.jsx","firebase.js","components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","useState","editable","setEditable","id","title","content","updateNote","setUpdateNote","initEdit","handleChange","event","target","localName","textContent","prevNote","handleBlur","onBlur","className","name","onClick","onInput","value","contentEditable","timeStamp","date","seconds","nanoseconds","Intl","DateTimeFormat","month","day","hour","minute","format","formatDate","time","onDelete","CreateArea","note","setNote","console","log","onChange","placeholder","rows","onAdd","preventDefault","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","i","App","notes","setNotes","notesCollectionRef","collection","getData","getDocs","query","orderBy","data","arrayData","docs","map","doc","useEffect","addNote","newNote","saveTime","addDoc","updateTarget","updateDoc","deleteNote","toDelete","deleteDoc","noteItem","key","onUpdate","ReactDOM","render","document","getElementById"],"mappings":"+OAWeA,MARf,WACE,OACE,gCACE,4BAAI,YCKKC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACE,2BAAG,oBAAaF,K,OC6EPG,MA/Ef,SAAcC,GAaZ,MAAgCC,mBAAS,SAAQ,mBAA1CC,EAAQ,KAAEC,EAAW,KAC5B,EAAoCF,mBAAS,CAC3CG,GAAI,GACJC,MAAO,GACPC,QAAS,KACT,mBAJKC,EAAU,KAAEC,EAAa,KAMhC,SAASC,IACPD,EAAc,CAAEJ,GAAIJ,EAAMI,GAAIC,MAAOL,EAAMK,MAAOC,QAASN,EAAMM,UACjEH,EAAY,QAGd,SAASO,EAAaC,GACpB,MAAmCA,EAAMC,OAAjCC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAUnBN,GAAc,SAAAO,GACZ,OAAO,2BACFA,GAAQ,kBAVC,MAWNF,EAVC,UAEA,QAQYC,OAOzB,SAASE,EAAWL,GAClBX,EAAMiB,OAAOV,GACbJ,EAAa,SAKf,OACE,yBAAKe,UAAU,QAEb,wBACEC,KAAK,QACLC,QAASX,EACTY,QAASX,EACTO,OAAQD,EACRM,MAAOf,EAAWD,QAClBiB,gBAAiBrB,GAAWF,EAAMK,OAEpC,uBACEc,KAAK,UACLC,QAASX,EACTY,QAASX,EACTO,OAAQD,EACRM,MAAOf,EAAWD,QAClBiB,gBAAiBrB,GAAWF,EAAMM,SACpC,uBAAGY,UAAU,aAAY,kBC3ExB,SAAoBM,GACvB,IAAMC,EAAO,IAAI5B,KAAyB,IAApB2B,EAAUE,QAAiBF,EAAUG,YAAc,KAQzE,OAPkB,IAAIC,KAAKC,eAAe,QAAS,CACjDjC,KAAM,UACNkC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YAEOC,OAAOT,GDkEmBU,CAAWnC,EAAMoC,OAE1D,4BAAQhB,QAvEZ,WACIpB,EAAMqC,SAASrC,EAAMI,MAsEU,YEvBtBkC,MAnDf,SAAoBtC,GAClB,MAAwBC,mBAAS,CAC/BI,MAAO,GACPC,QAAS,KACT,mBAHKiC,EAAI,KAAEC,EAAO,KAKpB,SAAS9B,EAAaC,GACpB,MAAwBA,EAAMC,OAAtBO,EAAI,EAAJA,KAAMG,EAAK,EAALA,MACdmB,QAAQC,IAAIvB,GACZsB,QAAQC,IAAIpB,GAEZkB,GAAQ,SAAAzB,GACN,OAAO,2BACFA,GAAQ,kBACVI,EAAOG,OAGZmB,QAAQC,IAAIH,GAYd,OACE,6BACE,8BACE,2BACEpB,KAAK,QACLwB,SAAUjC,EACVY,MAAOiB,EAAKlC,MACZuC,YAAY,2BAEd,8BACEzB,KAAK,UACLwB,SAAUjC,EACVY,MAAOiB,EAAKjC,QACZsC,YAAY,iBACZC,KAAK,MAEP,4BAAQzB,QAzBd,SAAoBT,GAClBX,EAAM8C,MAAMP,GACZC,EAAQ,CACNnC,MAAO,GACPC,QAAS,KAEXK,EAAMoC,mBAmB2B,U,gBC7B/BC,GADMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKAC,e,qBClBT,kmGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAsFeC,MA9Ef,WAGE,MAA0BzD,mBAAS,IAAG,mBAA/B0D,EAAK,KAAEC,EAAQ,KAKhBC,EAAqBC,YAAWd,EAAI,SACpCe,EAAO,uCAAG,sGAEKC,YAAQC,YAAMJ,EAAoBK,YAAQ,OAAQ,UAAS,OAAxEC,EAAI,OAEJC,EAAYD,EAAKE,KAAKC,KAAI,SAAAC,GAAG,gCAAOnE,GAAImE,EAAInE,IAAOmE,EAAIJ,QAAM,IAAEjE,SAAU,aAE/E0D,EAASQ,GAAU,2CACpB,kBAPY,mCASbI,qBAAU,WACRT,MACC,IAGH,IAAMU,EAAO,uCAAG,WAAOC,GAAO,uEACD,OAArBC,EAAW,IAAI9E,KAAM,SACrB+E,YAAOf,EAAoB,CAAExD,MAAOqE,EAAQrE,MAAOC,QAASoE,EAAQpE,QAAS8B,KAAMuC,IAAY,KAAD,EACpGZ,IAAS,2CACV,gBAJY,sCAQPxD,EAAU,uCAAG,WAAOA,GAAU,yEAKP,OADrBsE,EAAeN,YAAIvB,EAAI,QAASzC,EAAWH,IAC3CuE,EAAW,IAAI9E,KAAM,SACrBiF,YAAUD,EAAc,CAC5BxE,MAAOE,EAAWF,MAClBC,QAASC,EAAWD,QACpB8B,KAAMuC,IACN,OACFZ,IAAS,2CAEV,mDAbe,GAiBVgB,EAAU,uCAAG,WAAO3E,GAAE,uEACW,OAA/B4E,EAAWT,YAAIvB,EAAI,QAAS5C,GAAG,SAC/B6E,YAAUD,GAAS,OACzBjB,IAAS,2CACV,gBAJe,sCAQhB,OACE,6BACE,kBAAC,EAAM,MACP,kBAAC,EAAU,CAACjB,MAAO2B,IAClBd,EAAMW,KAAI,SAACY,GACV,OACE,kBAAC,EAAI,eACHC,IAAKD,EAAS9E,GACdA,GAAI8E,EAAS9E,IACT8E,EAAQ,CACZ7C,SAAU0C,EACVK,SAAU7E,EAEVU,OAAQV,QAId,kBAAC,EAAM,QC5Eb8E,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,W","file":"static/js/main.d6414e61.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport { formatDate } from \"../utils/dateUtils\";\n\n\nfunction Note(props) {\n\n  function handleAction() {\n      props.onDelete(props.id);\n  \n  }\n\n  //Know which note is editing -->Checked\n  //Load the content into a state-->Checked\n  //Turn it into editable box-->Checked\n  //Use same method of onchange to manage the content\n  ////Here is a bit of problem, I will need to find a way to pass the edited value back to the state. \n  //Use the same method of save to save it back to the database. \n  const [editable, setEditable] = useState(\"false\")\n  const [updateNote, setUpdateNote] = useState({\n    id: \"\",\n    title: \"\",\n    content: \"\"\n  });\n\n  function initEdit() {\n    setUpdateNote({ id: props.id, title: props.title, content: props.content });\n    setEditable(\"true\")\n  }\n\n  function handleChange(event) {\n    const { localName, textContent } = event.target;\n    function name(input) {\n      if (input === \"p\") {\n        return \"content\"\n      } else {\n        return \"title\"\n      }\n    };\n\n\n    setUpdateNote(prevNote => {\n      return {\n        ...prevNote,\n        [name(localName)]: textContent\n      };\n    });\n\n\n\n  }\n  function handleBlur(event) {\n    props.onBlur(updateNote)\n    setEditable( \"false\");\n\n  }\n\n\n  return (\n    <div className=\"note\" >\n\n      <h1\n        name=\"title\"\n        onClick={initEdit}\n        onInput={handleChange}\n        onBlur={handleBlur}\n        value={updateNote.content}\n        contentEditable={editable}>{props.title}</h1>\n\n      <p\n        name=\"content\"\n        onClick={initEdit}\n        onInput={handleChange}\n        onBlur={handleBlur}\n        value={updateNote.content}\n        contentEditable={editable}>{props.content}</p>\n      <p className=\"time-mark\">Last edited on {formatDate(props.time)}</p>\n\n      <button onClick={handleAction}>Delete</button>\n    </div>\n  );\n}\n\n\nexport default Note;\n","export function formatDate(timeStamp) {\r\n    const date = new Date(timeStamp.seconds * 1000 + timeStamp.nanoseconds / 1000000);\r\n    const formatter = new Intl.DateTimeFormat(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\"\r\n    });\r\n    return formatter.format(date);\r\n}\r\n\r\n","import React, { useState } from \"react\";\n\n\nfunction CreateArea(props) {\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    console.log(name);\n    console.log(value);\n\n    setNote(prevNote => {\n      return {\n        ...prevNote,\n        [name]: value\n      };\n    });\n    console.log(note);\n  }\n\n  function submitNote(event) {\n    props.onAdd(note);\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          name=\"title\"\n          onChange={handleChange}\n          value={note.title}\n          placeholder=\"Click to start editing\"\n        />\n        <textarea          \n          name=\"content\"\n          onChange={handleChange}\n          value={note.content}\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n        />\n        <button onClick={submitNote}>Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport { getFirestore } from \"@firebase/firestore\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAfFbTsjQpAb1S7TjURtZJpATVagkasTAE\",\r\n  authDomain: \"keeper-213ed.firebaseapp.com\",\r\n  projectId: \"keeper-213ed\",\r\n  storageBucket: \"keeper-213ed.appspot.com\",\r\n  messagingSenderId: \"513721806895\",\r\n  appId: \"1:513721806895:web:98e8f20d648073860496da\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db=getFirestore()\r\n\r\nexport {app,db}","import React, { useEffect, useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Note from \"./Note\";\r\nimport CreateArea from \"./CreateArea\";\r\nimport { db } from \"../firebase\";\r\nimport { collection, getDocs, addDoc, deleteDoc, updateDoc, doc, query, orderBy } from \"firebase/firestore\"\r\n\r\n\r\nfunction App() {\r\n\r\n  //Setup \"notes\" State\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  //CRUD of the notes\r\n  ////READ\r\n  //Load data from database\r\n  const notesCollectionRef = collection(db, \"notes\")\r\n  const getData = async () => {\r\n    //In order to make the latest note shows the first, need to sort with time and descent. \r\n    const data = await getDocs(query(notesCollectionRef, orderBy('time', \"desc\")))\r\n    //Map thru the docs get from database and put it into an array\r\n    const arrayData = data.docs.map(doc => ({ id: doc.id, ...doc.data(), editable: \"false\" }))\r\n    //Set the array to local var. \r\n    setNotes(arrayData)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  ////ADD\r\n  const addNote = async (newNote) => {\r\n    const saveTime = new Date()\r\n    await addDoc(notesCollectionRef, { title: newNote.title, content: newNote.content, time: saveTime });\r\n    getData()\r\n  }\r\n\r\n\r\n  ////EDIT\r\n  const updateNote = async (updateNote) => {\r\n    //passing updateNote from the note.jsx\r\n    //updateTarget is set for firebase function \"updateDoc\" to recognize which document to update. \r\n    //It takes 3 parameter: the database, the collection and the document ID. \r\n    const updateTarget = doc(db, \"notes\", updateNote.id)\r\n    const saveTime = new Date()\r\n    await updateDoc(updateTarget, {\r\n      title: updateNote.title,\r\n      content: updateNote.content,\r\n      time: saveTime\r\n    })\r\n    getData()\r\n\r\n  }\r\n\r\n  ////DELETE\r\n\r\n  const deleteNote = async (id) => {\r\n    const toDelete = doc(db, \"notes\", id)\r\n    await deleteDoc(toDelete)\r\n    getData()\r\n  }\r\n\r\n\r\n  //Rendering the result\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CreateArea onAdd={addNote} />\r\n      {notes.map((noteItem) => {\r\n        return (\r\n          <Note\r\n            key={noteItem.id}\r\n            id={noteItem.id}\r\n            {...noteItem}\r\n            onDelete={deleteNote}\r\n            onUpdate={updateNote}\r\n            //the updateNote function will take place either user leave the editing, which is unBlur, or clikced save. \r\n            onBlur={updateNote}\r\n          />\r\n        );\r\n      })}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// //note here\r\n// //use Switch to go between different routes. \r\n\r\n// const App = () => {\r\n//   return (\r\n//     <div>\r\n//       <Switch>\r\n//         <Route path=\"/\" exact component={Home} />\r\n//         <Route path=\"/about\" exact component={About} />\r\n//         <Route path=\"/brands\" exact component={Brands} />\r\n//         <Route path=\"/guide\" exact component={Guide} />\r\n//         <Route path=\"/contact\" exact component={Contact} />\r\n\r\n//         <Route\r\n//           render={function() {\r\n//             return <p>Not found</p>;\r\n//           }}\r\n//         />\r\n//       </Switch>\r\n//     </div>\r\n//   );\r\n// };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n\r\n//Latest way of rendering React:\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n// root.render(\r\n//     <React.StrictMode>\r\n//         <App />\r\n//     </React.StrictMode>\r\n// );\r\n\r\n//CHALLENGE:\r\n//1. Implement the add note functionality.\r\n//- Create a constant that keeps track of the title and content.\r\n//- Pass the new note back to the App.\r\n//- Add new note to an array.\r\n//- Take array and render seperate Note components for each item.\r\n\r\n//2. Implement the delete note functionality.\r\n//- Callback from the Note component to trigger a delete function.\r\n//- Use the filter function to filter out the item that needs deletion.\r\n//- Pass a id over to the Note component, pass it back to the App when deleting.\r\n\r\n\r\n//Self-Challenge:\r\n//Done: Connect to firebase and enable firestore. \r\n//Add edit note feature     <--This is super hard!\r\n    //First need to turn the note into editable mode-->Done\r\n    //Second to update the editing back -->Done\r\n    //save back to database-->Done\r\n//Add login feature, refer to secret tree hall. \r\n//Render the notes by timestamp\r\n//Identify user, and only show the user's content, so that it can actually be used. "],"sourceRoot":""}