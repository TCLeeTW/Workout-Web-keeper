{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","firebase.js","components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","useState","editable","setEditable","actionButton","setActionButton","id","title","content","updateNote","setUpdateNote","initEdit","console","log","handleChange","event","target","localName","textContent","name","input","prevNote","handleBlur","onBlur","className","onClick","onInput","value","contentEditable","editOn","onDelete","onUpdate","CreateArea","note","setNote","onChange","placeholder","rows","onAdd","preventDefault","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","i","App","notes","setNotes","notesCollectionRef","collection","getData","getDocs","query","orderBy","data","arrayData","docs","map","doc","useEffect","addNote","newNote","saveTime","addDoc","time","updateTarget","updateDoc","deleteNote","toDelete","deleteDoc","noteItem","index","key","toLocaleString","ReactDOM","render","document","getElementById"],"mappings":"+OAWeA,MARf,WACE,OACE,gCACE,4BAAI,YCKKC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACE,2BAAG,oBAAaF,K,OCiFPG,MArFf,SAAcC,GAiBZ,MAAgCC,mBAAS,SAAQ,mBAA1CC,EAAQ,KAAEC,EAAW,KAC5B,EAAwCF,mBAAS,UAAS,mBAAnDG,EAAY,KAAEC,EAAe,KACpC,EAAoCJ,mBAAS,CAC3CK,GAAI,GACJC,MAAO,GACPC,QAAS,KACT,mBAJKC,EAAU,KAAEC,EAAa,KAMhC,SAASC,IACPD,EAAc,CAAEJ,GAAIN,EAAMM,GAAIC,MAAOP,EAAMO,MAAOC,QAASR,EAAMQ,UACjEI,QAAQC,IAAIJ,GACZN,EAAY,QACZE,EAAgB,QAGlB,SAASS,EAAaC,GACpB,MAAmCA,EAAMC,OAAjCC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YACnB,SAASC,EAAKC,GACZ,MAAc,MAAVA,EACK,UAEA,QAGXR,QAAQC,IAAIM,EAAKF,IACjBL,QAAQC,IAAIK,GAEZR,GAAc,SAAAW,GACZ,OAAO,2BACFA,GAAQ,kBACVF,EAAKF,GAAaC,OAGvBN,QAAQC,IAAIJ,GAId,SAASa,EAAWP,GAClBf,EAAMuB,OAAOd,GAKf,OACE,yBAAKe,UAAU,QAEb,wBACEL,KAAK,QACLM,QAASd,EACTe,QAASZ,EACTS,OAAQD,EACRK,MAAOlB,EAAWD,QAClBoB,gBAAiB1B,GAAWF,EAAMO,OAEpC,uBACEY,KAAK,UACLM,QAASd,EACTe,QAASZ,EACTS,OAAQD,EACRK,MAAOlB,EAAWD,QAClBoB,gBAAiB1B,GAAWF,EAAMQ,SACpC,uBAAGgB,UAAU,aAAY,kBAAgBxB,EAAM6B,QAE/C,4BAAQJ,QA9EZ,WACuB,WAAjBrB,EACFJ,EAAM8B,SAAS9B,EAAMM,KAErBN,EAAM+B,SAAS/B,EAAMM,IACrBD,EAAgB,aAyEgBD,KC5BvB4B,MAnDf,SAAoBhC,GAClB,MAAwBC,mBAAS,CAC/BM,MAAO,GACPC,QAAS,KACT,mBAHKyB,EAAI,KAAEC,EAAO,KAKpB,SAASpB,EAAaC,GACpB,MAAwBA,EAAMC,OAAtBG,EAAI,EAAJA,KAAMQ,EAAK,EAALA,MACdf,QAAQC,IAAIM,GACZP,QAAQC,IAAIc,GAEZO,GAAQ,SAAAb,GACN,OAAO,2BACFA,GAAQ,kBACVF,EAAOQ,OAGZf,QAAQC,IAAIoB,GAYd,OACE,6BACE,8BACE,2BACEd,KAAK,QACLgB,SAAUrB,EACVa,MAAOM,EAAK1B,MACZ6B,YAAY,2BAEd,8BACEjB,KAAK,UACLgB,SAAUrB,EACVa,MAAOM,EAAKzB,QACZ4B,YAAY,iBACZC,KAAK,MAEP,4BAAQZ,QAzBd,SAAoBV,GAClBf,EAAMsC,MAAML,GACZC,EAAQ,CACN3B,MAAO,GACPC,QAAS,KAEXO,EAAMwB,mBAmB2B,U,gBC7B/BC,GADMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKAC,e,qBClBT,kmGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAuFeC,MA/Ef,WAGE,MAA0BjD,mBAAS,IAAG,mBAA/BkD,EAAK,KAAEC,EAAQ,KAGhBC,EAAqBC,YAAWd,EAAI,SACpCe,EAAO,uCAAG,sGAEKC,YAAQC,YAAMJ,EAAoBK,YAAQ,OAAQ,UAAS,OAAxEC,EAAI,OAEJC,EAAYD,EAAKE,KAAKC,KAAI,SAAAC,GAAG,gCAAOzD,GAAIyD,EAAIzD,IAAOyD,EAAIJ,QAAM,IAAEzD,SAAU,aAE/EkD,EAASQ,GAAU,2CACpB,kBAPY,mCASbI,qBAAU,WACRT,MACC,IAGH,IAAMU,EAAO,uCAAG,WAAOC,GAAO,uEAEN,OADhBC,EAAW,IAAItE,KACrBe,QAAQC,IAAIsD,GAAU,SAChBC,YAAOf,EAAoB,CAAE9C,MAAO2D,EAAQ3D,MAAOC,QAAS0D,EAAQ1D,QAAS6D,KAAMF,IAAY,KAAD,EACpGZ,IAAS,2CACV,gBALY,sCASP9C,EAAU,uCAAG,WAAOA,GAAU,yEAKP,OADrB6D,EAAeP,YAAIvB,EAAI,QAAS/B,EAAWH,IAC3C6D,EAAW,IAAItE,KAAM,SACrB0E,YAAUD,EAAc,CAC5B/D,MAAOE,EAAWF,MAClBC,QAASC,EAAWD,QACpB6D,KAAMF,IACN,OACFZ,IAAS,2CAEV,mDAbe,GAiBViB,EAAU,uCAAG,WAAOlE,GAAE,uEACW,OAA/BmE,EAAWV,YAAIvB,EAAI,QAASlC,GAAG,SAC/BoE,YAAUD,GAAS,OACzBlB,IAAS,2CACV,gBAJe,sCAQhB,OACE,6BACE,kBAAC,EAAM,MACP,kBAAC,EAAU,CAACjB,MAAO2B,IAClBd,EAAMW,KAAI,SAACa,EAAUC,GACpB,OACE,kBAAC,EAAI,CACHC,IAAKD,EACLtE,GAAIqE,EAASrE,GACbC,MAAOoE,EAASpE,MAChBC,QAASmE,EAASnE,QAClBqB,OAAQhC,KAAK8E,EAASN,MAAMS,eAAe,SAC3ChD,SAAU0C,EACVzC,SAAUtB,EAEVc,OAAQd,OAId,kBAAC,EAAM,QC7EbsE,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,W","file":"static/js/main.1bc02a33.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useState } from \"react\";\n\nfunction Note(props) {\n\n  function handleAction() {\n    if (actionButton === \"Delete\") {\n      props.onDelete(props.id);\n    } else {\n      props.onUpdate(props.id)\n      setActionButton(\"Delete\")\n    }\n  }\n\n  //Know which note is editing -->Checked\n  //Load the content into a state-->Checked\n  //Turn it into editable box-->Checked\n  //Use same method of onchange to manage the content\n  ////Here is a bit of problem, I will need to find a way to pass the edited value back to the state. \n  //Use the same method of save to save it back to the database. \n  const [editable, setEditable] = useState(\"false\")\n  const [actionButton, setActionButton] = useState(\"Delete\")\n  const [updateNote, setUpdateNote] = useState({\n    id: \"\",\n    title: \"\",\n    content: \"\"\n  });\n\n  function initEdit() {\n    setUpdateNote({ id: props.id, title: props.title, content: props.content });\n    console.log(updateNote)\n    setEditable(\"true\")\n    setActionButton(\"Save\")\n  }\n\n  function handleChange(event) {\n    const { localName, textContent } = event.target;\n    function name(input) {\n      if (input === \"p\") {\n        return \"content\"\n      } else {\n        return \"title\"\n      }\n    };\n    console.log(name(localName));\n    console.log(textContent);\n\n    setUpdateNote(prevNote => {\n      return {\n        ...prevNote,\n        [name(localName)]: textContent\n      };\n    });\n    console.log(updateNote);\n\n\n  }\n  function handleBlur(event) {\n    props.onBlur(updateNote)\n\n  }\n\n\n  return (\n    <div className=\"note\" >\n\n      <h1\n        name=\"title\"\n        onClick={initEdit}\n        onInput={handleChange}\n        onBlur={handleBlur}\n        value={updateNote.content}\n        contentEditable={editable}>{props.title}</h1>\n\n      <p\n        name=\"content\"\n        onClick={initEdit}\n        onInput={handleChange}\n        onBlur={handleBlur}\n        value={updateNote.content}\n        contentEditable={editable}>{props.content}</p>\n      <p className=\"time-mark\">Last edited on {props.editOn}</p>\n\n      <button onClick={handleAction}>{actionButton}</button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\n\n\nfunction CreateArea(props) {\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    console.log(name);\n    console.log(value);\n\n    setNote(prevNote => {\n      return {\n        ...prevNote,\n        [name]: value\n      };\n    });\n    console.log(note);\n  }\n\n  function submitNote(event) {\n    props.onAdd(note);\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          name=\"title\"\n          onChange={handleChange}\n          value={note.title}\n          placeholder=\"Click to start editing\"\n        />\n        <textarea          \n          name=\"content\"\n          onChange={handleChange}\n          value={note.content}\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n        />\n        <button onClick={submitNote}>Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport { getFirestore } from \"@firebase/firestore\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAfFbTsjQpAb1S7TjURtZJpATVagkasTAE\",\r\n  authDomain: \"keeper-213ed.firebaseapp.com\",\r\n  projectId: \"keeper-213ed\",\r\n  storageBucket: \"keeper-213ed.appspot.com\",\r\n  messagingSenderId: \"513721806895\",\r\n  appId: \"1:513721806895:web:98e8f20d648073860496da\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db=getFirestore()\r\n\r\nexport {app,db}","import React, { useEffect, useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport { db } from \"../firebase\";\nimport { collection, getDocs, addDoc, deleteDoc, updateDoc, doc, query, orderBy } from \"firebase/firestore\"\n\n\nfunction App() {\n\n  //Setup \"notes\" State\n  const [notes, setNotes] = useState([]);\n\n  //Load data from database\n  const notesCollectionRef = collection(db, \"notes\")\n  const getData = async () => {\n    //In order to make the latest note shows the first, need to sort with time and descent. \n    const data = await getDocs(query(notesCollectionRef, orderBy('time', \"desc\")))\n    //Map thru the docs get from database and put it into an array\n    const arrayData = data.docs.map(doc => ({ id: doc.id, ...doc.data(), editable: \"false\" }))\n    //Set the array to local var. \n    setNotes(arrayData)\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  //Adding new note\n  const addNote = async (newNote) => {\n    const saveTime = new Date()\n    console.log(saveTime);\n    await addDoc(notesCollectionRef, { title: newNote.title, content: newNote.content, time: saveTime });\n    getData()\n  }\n\n\n  // //editing Note\n  const updateNote = async (updateNote) => {\n    //passing updateNote from the note.jsx\n    //updateTarget is set for firebase function \"updateDoc\" to recognize which document to update. \n    //It takes 3 parameter: the database, the collection and the document ID. \n    const updateTarget = doc(db, \"notes\", updateNote.id)\n    const saveTime = new Date()\n    await updateDoc(updateTarget, {\n      title: updateNote.title,\n      content: updateNote.content,\n      time: saveTime\n    })\n    getData()\n\n  }\n\n  //Delete existing note\n\n  const deleteNote = async (id) => {\n    const toDelete = doc(db, \"notes\", id)\n    await deleteDoc(toDelete)\n    getData()\n  }\n\n\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} />\n      {notes.map((noteItem, index) => {\n        return (\n          <Note\n            key={index}\n            id={noteItem.id}\n            title={noteItem.title}\n            content={noteItem.content}\n            editOn={Date(noteItem.time).toLocaleString(\"zh-CN\")}\n            onDelete={deleteNote}\n            onUpdate={updateNote}\n            //the updateNote function will take place either user leave the editing, which is unBlur, or clikced save. \n            onBlur={updateNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n// //note here\n// //use Switch to go between different routes. \n\n// const App = () => {\n//   return (\n//     <div>\n//       <Switch>\n//         <Route path=\"/\" exact component={Home} />\n//         <Route path=\"/about\" exact component={About} />\n//         <Route path=\"/brands\" exact component={Brands} />\n//         <Route path=\"/guide\" exact component={Guide} />\n//         <Route path=\"/contact\" exact component={Contact} />\n\n//         <Route\n//           render={function() {\n//             return <p>Not found</p>;\n//           }}\n//         />\n//       </Switch>\n//     </div>\n//   );\n// };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n//Latest way of rendering React:\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>\n// );\n\n//CHALLENGE:\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n\n\n//Self-Challenge:\n//Done: Connect to firebase and enable firestore. \n//Add edit note feature     <--This is super hard!\n    //First need to turn the note into editable mode-->Done\n    //Second to update the editing back -->Done\n    //save back to database-->Done\n//Add login feature, refer to secret tree hall. \n//Render the notes by timestamp\n//Identify user, and only show the user's content, so that it can actually be used. "],"sourceRoot":""}